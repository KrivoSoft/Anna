from datetime import datetime, timedelta
from typing import Union, Optional

import yaml
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from aiogram.types import Message
from entities import (
    get_booking_options, is_spot_free, get_parking_spot_by_name, get_user_by_username, get_user_by_name, get_user_role,
    create_reservation, Reservation, User, Role, ParkingSpot)

""" –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö """
TEXT_BUTTON_1 = "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –º–Ω–µ –º–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ"
TEXT_BUTTON_2 = "–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –ø–æ –±—Ä–æ–Ω–∏"
TEXT_BUTTON_3 = "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
START_MESSAGE = "–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞.\n–ü–æ–º–æ–≥—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ."
HELP_MESSAGE = "/start - –∏ –º—ã –Ω–∞—á–Ω—ë–º –¥–∏–∞–ª–æ–≥ —Å–Ω–∞—á–∞–ª–∞ üëÄ\n/help - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É üíÅüèª‚Äç‚ôÄÔ∏è"
ALL_SPOT_ARE_BUSY_MESSAGE = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã üò¢"
DATE_REQUEST_MESSAGE = '–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è –º–æ–≥—É –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å...'
ACCESS_IS_NOT_ALLOWED_MESSAGE = "–ù–µ—Ç üôÖüèª‚Äç‚ôÄÔ∏è"
UNKNOWN_USER_MESSAGE_1 = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏ –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é üôÑ"
UNKNOWN_USER_MESSAGE_2 = "üíÖüèª"
BEFORE_SEND_REPORT_MESSAGE = "–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –í–∞—à –æ—Ç—á—ë—Ç:\n\n"

ROLE_ADMINISTRATOR = "ADMINISTRATOR"
ROLE_AUDITOR = "AUDITOR"
ROLE_CLIENT = "CLIENT"

all_roles_obj = []
all_users_obj = []
all_spots_obj = []


def get_inline_keyboard_for_booking(
        available_spots: list[ParkingSpot],
        available_date: datetime.date) -> InlineKeyboardMarkup:
    buttons_list = []

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã
    for one_spot in available_spots:
        available_date_str = available_date.strftime("%Y-%m-%d")
        one_button: InlineKeyboardButton = InlineKeyboardButton(
            text=one_spot.name,
            callback_data=f'book {one_spot.name} {available_date_str}')
        buttons_list.append(one_button)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[buttons_list])
    return keyboard


# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
with open('settings.yml', 'r') as file:
    CONSTANTS = yaml.safe_load(file)
API_TOKEN = CONSTANTS['API_TOKEN']

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()


def is_message_from_unknown_user(message: Union[Message, CallbackQuery]) -> bool:
    requester_username = message.from_user.username
    requester_user = get_user_by_username(requester_username)

    if requester_user is None:
        requester_first_name = message.from_user.first_name
        requester_last_name = message.from_user.last_name
        requester_user = get_user_by_name(requester_first_name, requester_last_name)
        if requester_user is None:
            return True

    return False


def create_start_menu_keyboard(
        is_show_book_button: bool,
        is_show_report_button: bool,
        is_show_add_user_button: bool,
) -> ReplyKeyboardMarkup:
    """ –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start """
    book_button: KeyboardButton = KeyboardButton(text=TEXT_BUTTON_1)
    report_button: KeyboardButton = KeyboardButton(text=TEXT_BUTTON_2)
    add_user_button: KeyboardButton = KeyboardButton(text=TEXT_BUTTON_3)

    buttons_list = []

    if is_show_book_button:
        buttons_list.append(book_button)
    if is_show_report_button:
        buttons_list.append(report_button)
    if is_show_add_user_button:
        buttons_list.append(add_user_button)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
        keyboard=[buttons_list],
        resize_keyboard=True
    )

    return keyboard


@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    """ –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/start" """

    if is_message_from_unknown_user(message):
        await message.reply(
            UNKNOWN_USER_MESSAGE_1
        )
        await message.answer(
            UNKNOWN_USER_MESSAGE_2
        )
        return 0

    show_book_button = False
    show_report_button = False
    show_add_user_button = False

    """ –¢–æ–ø–æ—Ä–Ω–æ –ø—Ä–æ–ø–∏—à–µ–º –ø–æ–ª–Ω–æ–º–æ—á–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é """
    user_role = get_user_role(message)
    if user_role == ROLE_ADMINISTRATOR:
        show_book_button = True
        show_report_button = True
        show_add_user_button = True
    elif user_role == ROLE_AUDITOR:
        show_report_button = True
    elif user_role == ROLE_CLIENT:
        show_book_button = True

    await message.answer(
        START_MESSAGE,
        reply_markup=create_start_menu_keyboard(show_book_button, show_report_button, show_add_user_button)
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(HELP_MESSAGE)


@dp.message(F.text == TEXT_BUTTON_1)
async def process_answer(message: Message):
    """ –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ """
    if is_message_from_unknown_user(message):
        await message.reply(
            UNKNOWN_USER_MESSAGE_1
        )
        await message.answer(
            UNKNOWN_USER_MESSAGE_2
        )
        return 0

    if get_user_role(message) == ROLE_AUDITOR:
        await message.reply(
            ACCESS_IS_NOT_ALLOWED_MESSAGE
        )
        return 0

    available_spots, available_date = get_booking_options()
    print(available_spots)

    if len(available_spots) > 0:
        inline_keyboard = get_inline_keyboard_for_booking(available_spots, available_date)

        await message.reply(
            text=DATE_REQUEST_MESSAGE,
            reply_markup=inline_keyboard
        )
    else:
        await message.reply(
            text=ALL_SPOT_ARE_BUSY_MESSAGE,
            reply_markup=ReplyKeyboardRemove()
        )


@dp.callback_query(lambda c: c.data.startswith('book'))
async def process_button_callback(callback_query: CallbackQuery):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –¥–∞—Ç–æ–π –±—Ä–æ–Ω–∏ """
    if is_message_from_unknown_user(callback_query):
        await callback_query.reply(
            UNKNOWN_USER_MESSAGE_1
        )
        await callback_query.answer(
            UNKNOWN_USER_MESSAGE_2
        )
        return 0

    """ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ """
    button_data = callback_query.data
    query_data = button_data.split()
    booking_spot = query_data[1]  # <- –í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ
    booking_date = query_data[2] # <- –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    requester_username = callback_query.from_user.username

    print("query_data: ", query_data)

    if requester_username == "":
        requester_username = callback_query.from_user.first_name

    all_spots = ParkingSpot.select()
    booking_spot_obj = get_parking_spot_by_name(booking_spot, all_spots)
    print("booking_spot_obj: ", booking_spot_obj)
    if booking_spot_obj is None:
        print("–û—à–∏–±–∫–∞. –ü–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    requester_user = get_user_by_username(requester_username)
    if requester_user is None:
        requester_first_name = callback_query.from_user.first_name
        requester_last_name = callback_query.from_user.last_name
        requester_user = get_user_by_name(requester_first_name, requester_last_name)
        if requester_user is None:
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ú–Ω–µ —Ç–∞–∫ –∂–∞–ª—å üò¢")
            return 0

    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω. –ï—Å–ª–∏ –¥–∞, —Ç–æ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î """
    if is_spot_free(booking_spot_obj, booking_date):
        create_reservation(
            spot_id=booking_spot_obj.id,
            date=booking_date,
            user=requester_user
        )

    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=f'–•–æ—Ä–æ—à–æ üòä \n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∞ –í–∞–º –º–µ—Å—Ç–æ "{booking_spot}" –Ω–∞ {booking_date}',
        reply_markup=ReplyKeyboardRemove()
    )

    """ –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è """
    await callback_query.message.edit_reply_markup(
        reply_markup=None
    )

    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π callback –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–æ–Ω–∞ –∏ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–æ—Ä–≥–∞–ª–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ """
    await callback_query.answer(
        text=f'–£—Å–ø–µ—à–Ω–æ!'
    )


if __name__ == '__main__':
    dp.run_polling(bot)


def run_bot(data: dict):
    """ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ """
    global all_users_obj
    global all_roles_obj
    global all_spots_obj
    all_users_obj = data["all_users_obj"]
    all_roles_obj = data["all_roles_obj"]
    all_spots_obj = data["all_spots_obj"]

    print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    dp.run_polling(bot)


@dp.message(F.text == TEXT_BUTTON_2)
async def process_answer(message: Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–Ω—è—Ç—ã–º –º–µ—Å—Ç–∞–º """

    if is_message_from_unknown_user(message):
        await message.reply(
            UNKNOWN_USER_MESSAGE_1
        )
        await message.answer(
            UNKNOWN_USER_MESSAGE_2
        )
        return 0

    if get_user_role(message) == ROLE_CLIENT:
        await message.reply(
            ACCESS_IS_NOT_ALLOWED_MESSAGE
        )
        return 0

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
    two_weeks_ago = datetime.now() - timedelta(weeks=2)
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–±–æ—Ä–∫—É
    reservations = Reservation.select().where(Reservation.booking_date >= two_weeks_ago)
    report = ""

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for reservation in reservations:
        report += f"–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {reservation.booking_date}. "
        report += f"–ú–µ—Å—Ç–æ: {reservation.parking_spot_id.name}. "
        report += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reservation.user_id.first_name}.\n\n"

    await bot.send_message(
        chat_id=message.chat.id,
        text=f"{BEFORE_SEND_REPORT_MESSAGE}{report}"
    )
