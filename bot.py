from datetime import datetime, timedelta, date

import yaml
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message
from aiogram.types import (
    ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)

from entities import Reservation, User, ParkingSpot, Guest, Role

from peewee import DoesNotExist

""" –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö """
TEXT_BUTTON_1 = "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –º–Ω–µ –º–µ—Å—Ç–æ üÖøÔ∏è"
TEXT_BUTTON_2 = "–û—Ç–ø—Ä–∞–≤—å –æ—Ç—á—ë—Ç –ø–æ –±—Ä–æ–Ω–∏ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ üìù"
TEXT_BUTTON_3 = "–û—Ç–º–µ–Ω–∏ –±—Ä–æ–Ω—å ‚ùå"
TEXT_BUTTON_4 = "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É üïí"
START_MESSAGE = "–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞.\n–ü–æ–º–æ–≥—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ."
HELP_MESSAGE = "/start - –∏ –º—ã –Ω–∞—á–Ω—ë–º –¥–∏–∞–ª–æ–≥ —Å–Ω–∞—á–∞–ª–∞ üëÄ\n/help - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É üíÅüèª‚Äç‚ôÄÔ∏è"
ALL_SPOT_ARE_BUSY_MESSAGE = "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã üò¢"
DATE_REQUEST_MESSAGE = '–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —è –º–æ–≥—É –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å'
ACCESS_IS_NOT_ALLOWED_MESSAGE = "–ù–µ—Ç üôÖüèª‚Äç‚ôÄÔ∏è"
UNKNOWN_USER_MESSAGE_1 = "–≠–º–º–º ... –ú—ã —Å –í–∞–º–∏ –∑–Ω–∞–∫–æ–º—ã? üëÄ"
UNKNOWN_USER_MESSAGE_2 = "üíÖüèª"
BEFORE_SEND_REPORT_MESSAGE = "–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –í–∞—à –æ—Ç—á—ë—Ç:\n\n"
UNKNOWN_TEXT_MESSAGE = "–≠–º–º–º ... üëÄ"
UNKNOWN_ERROR_MESSAGE = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ú–Ω–µ —Ç–∞–∫ –∂–∞–ª—å üò¢"
NO_RESERVATIONS_MESSAGE = "–ö–∞–∂–µ—Ç—Å—è, –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª üòí"
CANCEL_SUCCESS_MESSAGE = "–•–æ—Ä–æ—à–æ, —É–¥–∞–ª–∏–ª–∞. ü´¥üèª"
TEXT_ADD_USER_BUTTON = "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§"
TEXT_DELETE_USER_BUTTON = "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü™£"
INPUT_USERNAME_MESSAGE = "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ 0"
INPUT_FIRST_NAME_MESSAGE = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è (first name) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ 0"
INPUT_LAST_NAME_MESSAGE = "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (last name) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ 0"
CHOOSE_ROLE_MESSAGE = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
USER_ADDED_SUCCESS_MESSAGE = "–ó–∞–ø–∏—Å–∞–ª–∞ ‚úçüèª\n–ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º üëÄ"
UNCORRECT_CHOICE_MESSAGE = "–ù—É –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞! ü§¶üèª‚Äç‚ôÄÔ∏è"
CHOOSE_GUEST_MESSAGE = "–ö–æ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ... üëÅÔ∏è"
NO_GUESTS_MESSAGE = "–ö–æ –º–Ω–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª. –ù–µ–∫–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å ü§∑üèª‚Äç‚ôÄÔ∏è"
SUCCESS_MESSAGE = "–£—Å–ø–µ—à–Ω–æ"
TEXT_CHOOSE_USER_FOR_DELETE_MESSAGE = "–•–æ—Ä–æ—à–æ. –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id –∫–æ–≥–æ —É–¥–∞–ª—è–µ–º:\n*–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ—Ç–º–µ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ -1"
TEXT_UNCORRECT_USER_ID_MESSAGE = "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞ –í–∞—Å ü§®"
TEXT_DELETE_USER_SUCCESS_MESSAGE = "–í—ã—á–µ—Ä–∫–Ω—É–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –Ø –±—É–¥—É –ø–æ –Ω–µ–º—É —Å–∫—É—á–∞—Ç—å üò¢ ... —Ö–æ—Ç—è –∫–æ–≥–æ —è –æ–±–º–∞–Ω—ã–≤–∞—é üíÉüèº."
TEXT_DELETE_USER_CANCEL_MESSAGE = "–•–æ—Ä–æ—à–æ. –°–¥–µ–ª–∞–µ–º –≤–∏–¥, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ üíÖ"

ROLE_ADMINISTRATOR = "ADMINISTRATOR"
ROLE_AUDITOR = "AUDITOR"
ROLE_CLIENT = "CLIENT"

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
with open('settings.yml', 'r') as file:
    CONSTANTS = yaml.safe_load(file)

TODAY_DEADLINE_CLOCK_FOR_CLIENTS = CONSTANTS["TODAY_DEADLINE_CLOCK_FOR_CLIENTS"]


class FSMFillForm(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    add_user = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    choose_role = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    book_spot = State()  # –°–æ—Å—Ç–∞—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    choose_user_for_delete = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è


def get_inline_keyboard_for_booking(
        available_spots: list[ParkingSpot],
        available_date: datetime.date) -> InlineKeyboardMarkup:
    buttons_list = []

    """ –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã """
    for one_spot in available_spots:
        available_date_str = available_date.strftime("%Y-%m-%d")
        one_button: InlineKeyboardButton = InlineKeyboardButton(
            text=one_spot.name,
            callback_data=f'book {one_spot.name} {available_date_str}')
        buttons_list.append(one_button)

    """ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã """
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[buttons_list])
    return keyboard


""" –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ """
with open('settings.yml', 'r') as file:
    CONSTANTS = yaml.safe_load(file)
API_TOKEN = CONSTANTS['API_TOKEN']

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()


async def is_user_unauthorized(message: Message):
    authorized_ids = [user.telegram_id for user in User.select()]

    if message.from_user.id not in authorized_ids:
        return True
    return False


async def send_refusal_unauthorized(message: Message):
    await message.answer(UNKNOWN_USER_MESSAGE_1)


def create_start_menu_keyboard(
        is_show_book_button: bool,
        is_show_report_button: bool,
        is_show_cancel_button: bool,
        is_show_adduser_button: bool = False,
        is_show_delete_user_button: bool = False,
        is_show_free_spots_button: bool = False
) -> ReplyKeyboardMarkup:
    """ –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start """
    book_button: KeyboardButton = KeyboardButton(text=TEXT_BUTTON_1)
    report_button: KeyboardButton = KeyboardButton(text=TEXT_BUTTON_2)
    cancel_reservation_button: KeyboardButton = KeyboardButton(text=TEXT_BUTTON_3)
    add_user_button: KeyboardButton = KeyboardButton(text=TEXT_ADD_USER_BUTTON)
    delete_user_button: KeyboardButton = KeyboardButton(text=TEXT_DELETE_USER_BUTTON)
    show_free_spots: KeyboardButton = KeyboardButton(text=TEXT_BUTTON_4)

    buttons_list = []

    """ 
    –ö–∞–∂–¥—ã–π –º–∞—Å—Å–∏–≤ - –æ–¥–∏–Ω —Ä—è–¥ –∫–Ω–æ–ø–æ–∫.
    –ß—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, 
    —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ 
    """
    if is_show_book_button:
        buttons_list.append([book_button])
    if is_show_report_button:
        buttons_list.append([report_button])
    if is_show_cancel_button:
        buttons_list.append([cancel_reservation_button])
    if is_show_adduser_button:
        buttons_list.append([add_user_button])
    if is_show_delete_user_button:
        buttons_list.append([delete_user_button])
    if is_show_free_spots_button:
        buttons_list.append([show_free_spots])

    """ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏ """
    keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
        keyboard=buttons_list,
        resize_keyboard=True
    )

    return keyboard


@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message, state: FSMContext):
    """ –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/start" """

    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å """
    if await is_user_unauthorized(message):

        """ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–±—Ä–∞—â–∞–ª—Å—è –∫ –±–æ—Ç—É, —Ç–æ –∑–∞–Ω–æ—Å–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ """
        guest = Guest.select().where(
            (Guest.username == message.from_user.username) &
            (Guest.first_name == message.from_user.first_name) &
            (Guest.last_name == message.from_user.last_name)
        ).first()
        if guest is None:
            """ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è –≤ –ë–î """
            new_guest = Guest.create(
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                telegram_id=message.from_user.id
            )
            new_guest.save()

        await send_refusal_unauthorized(message)
        return 0

    """ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º """
    show_book_button = False
    show_report_button = False
    show_cancel_button = False
    show_add_user_button = False
    show_delete_user_button = False
    show_free_spots_now = False

    """ –¢–æ–ø–æ—Ä–Ω–æ –ø—Ä–æ–ø–∏—à–µ–º –ø–æ–ª–Ω–æ–º–æ—á–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é """
    user_telegram_id = message.from_user.id
    user_role = User.get_user_role(user_telegram_id)

    if user_role == ROLE_ADMINISTRATOR:
        show_book_button = True
        show_report_button = True
        show_add_user_button = True
        show_free_spots_now = True
        show_delete_user_button = True
    elif user_role == ROLE_AUDITOR:
        show_report_button = True
        show_free_spots_now = True
    elif user_role == ROLE_CLIENT:
        show_book_button = True

    user_id = message.from_user.id
    requester = User.get_user_by_id(user_id)

    if requester is None:
        print("–û—à–∏–±–∫–∞")
        return 0

    current_date = date.today()
    current_time = datetime.now().time()

    if current_time.hour >= TODAY_DEADLINE_CLOCK_FOR_CLIENTS:
        checking_date = current_date + timedelta(days=1)
    else:
        checking_date = current_date

    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—Ä–æ–Ω–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É """
    reserved_spots = Reservation.select().where(
        Reservation.booking_date == checking_date,
        Reservation.user_id == requester.id
    ).count()

    """ –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –∞ –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–±–∏—Ä–∞–µ–º """
    if reserved_spots > 0:
        show_cancel_button = True
        show_book_button = False

    await state.clear()

    await message.answer(
        START_MESSAGE,
        reply_markup=create_start_menu_keyboard(
            show_book_button,
            show_report_button,
            show_cancel_button,
            show_add_user_button,
            show_delete_user_button,
            show_free_spots_now
        )
    )


@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    """ –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help" """
    await message.answer(HELP_MESSAGE)


@dp.message(F.text == TEXT_BUTTON_1)
async def process_answer_book(message: Message):
    """ –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ """

    if await is_user_unauthorized(message):
        await send_refusal_unauthorized(message)
        return 0

    user_id = message.from_user.id
    if User.get_user_role(user_id) == ROLE_AUDITOR:
        await message.reply(
            ACCESS_IS_NOT_ALLOWED_MESSAGE
        )
        return 0

    requester_id = message.from_user.id
    requester = User.get_user_by_id(requester_id)

    if requester is None:
        print("–û—à–∏–±–∫–∞")
        return 0

    current_date = date.today()
    current_time = datetime.now().time()

    if current_time.hour >= TODAY_DEADLINE_CLOCK_FOR_CLIENTS:
        checking_date = current_date + timedelta(days=1)
    else:
        checking_date = current_date

    reservations_by_user_count = Reservation.select(Reservation, User).join(User).where(
        Reservation.user_id == requester.id,
        Reservation.user_id.first_name == requester.first_name,
        Reservation.booking_date == checking_date
    ).count()

    if reservations_by_user_count > 0:
        await message.reply(
            text=f"–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ:",
            reply_markup=ReplyKeyboardRemove()
        )
        reserved_place = Reservation.get(
            Reservation.booking_date == checking_date,
            Reservation.user_id == requester.id
        )
        await message.answer(
            text=f"–ú–µ—Å—Ç–æ: {reserved_place.parking_spot_id.name}, –¥–∞—Ç–∞: {reserved_place.booking_date}"
        )
        return 0

    current_date = date.today()
    current_time = datetime.now().time()

    if current_time.hour >= TODAY_DEADLINE_CLOCK_FOR_CLIENTS:
        date_for_book = current_date + timedelta(days=1)
    else:
        date_for_book = current_date

    available_spots = ParkingSpot.get_booking_options(date_for_book)

    if len(available_spots) > 0:
        inline_keyboard = get_inline_keyboard_for_booking(available_spots, date_for_book)

        await message.reply(
            text=" ".join([DATE_REQUEST_MESSAGE, "–Ω–∞", str(checking_date)]),
            reply_markup=inline_keyboard
        )
    else:
        await message.reply(
            text=f"–¢–∞–∫—Å ...\n–ù–∞ {checking_date}, {ALL_SPOT_ARE_BUSY_MESSAGE}",
            reply_markup=ReplyKeyboardRemove()
        )


@dp.callback_query(lambda c: c.data.startswith('book'))
async def process_button_callback(callback_query: CallbackQuery):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –¥–∞—Ç–æ–π –±—Ä–æ–Ω–∏ """

    """ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ """
    button_data = callback_query.data
    query_data = button_data.split()
    booking_spot = query_data[1]  # <- –í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ
    booking_date = query_data[2]  # <- –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    requester_username = callback_query.from_user.username

    print("query_data: ", query_data)

    if requester_username == "":
        requester_username = callback_query.from_user.first_name

    all_spots = ParkingSpot.select()
    booking_spot_obj = ParkingSpot.get_parking_spot_by_name(booking_spot, all_spots)
    print("booking_spot_obj: ", booking_spot_obj)
    if booking_spot_obj is None:
        print("–û—à–∏–±–∫–∞. –ü–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return 0

    requester_id = callback_query.from_user.id
    requester_user = User.get_user_by_id(requester_id)

    if requester_user is None:
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=UNKNOWN_ERROR_MESSAGE)
        return 0

    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω. –ï—Å–ª–∏ –¥–∞, —Ç–æ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î """
    if booking_spot_obj.is_spot_free(booking_date):
        Reservation.create_reservation(
            spot_id=booking_spot_obj.id,
            date=booking_date,
            user=requester_user
        )

    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=f'–•–æ—Ä–æ—à–æ üòä \n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∞ –í–∞–º –º–µ—Å—Ç–æ "{booking_spot}" –Ω–∞ {booking_date}',
        reply_markup=ReplyKeyboardRemove()
    )

    """ –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è """
    await callback_query.message.edit_reply_markup(
        reply_markup=None
    )

    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π callback –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–æ–Ω–∞ –∏ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–æ—Ä–≥–∞–ª–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ """
    await callback_query.answer(
        text=f'–£—Å–ø–µ—à–Ω–æ!'
    )


if __name__ == '__main__':
    dp.run_polling(bot)


def run_bot():
    print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    dp.run_polling(bot)


@dp.message(F.text == TEXT_BUTTON_2)
async def process_answer_send_report(message: Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–Ω—è—Ç—ã–º –º–µ—Å—Ç–∞–º """

    if await is_user_unauthorized(message):
        await send_refusal_unauthorized(message)
        return 0

    user_id = message.from_user.id
    if User.get_user_role(user_id) == ROLE_CLIENT:
        await message.reply(
            ACCESS_IS_NOT_ALLOWED_MESSAGE
        )
        return 0

    """ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥ """
    two_weeks_ago = datetime.now() - timedelta(weeks=2)
    """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–±–æ—Ä–∫—É """
    reservations = Reservation.select().where(Reservation.booking_date >= two_weeks_ago)
    report = ""
    """ –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ """
    for reservation in reservations:
        try:
            user_name = reservation.user_id.username
        except DoesNotExist:
            user_name = "[–î–ê–ù–ù–´–ï –£–î–ê–õ–ï–ù–´]"

        if (user_name == "") or (user_name is None):
            user_name = " ".join([reservation.user_id.first_name, reservation.user_id.last_name])
        report += f"–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {reservation.booking_date}. "
        report += f"–ú–µ—Å—Ç–æ: {reservation.parking_spot_id.name}. "
        report += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}.\n\n"

    if report == "":
        await bot.send_message(
            chat_id=message.chat.id,
            text=NO_RESERVATIONS_MESSAGE
        )
        return 0

    await bot.send_message(
        chat_id=message.chat.id,
        text=f"{BEFORE_SEND_REPORT_MESSAGE}{report}",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(F.text == TEXT_BUTTON_4)
async def process_answer_free_spots(message: Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É –æ—Ç—á—ë—Ç–∞ –ø–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –º–µ—Å—Ç–∞–º """

    if await is_user_unauthorized(message):
        await send_refusal_unauthorized(message)
        return 0

    user_id = message.from_user.id
    if User.get_user_role(user_id) == ROLE_CLIENT:
        await message.reply(
            ACCESS_IS_NOT_ALLOWED_MESSAGE
        )
        return 0

    current_date = date.today()
    current_time = datetime.now().time()

    if current_time.hour >= TODAY_DEADLINE_CLOCK_FOR_CLIENTS:
        date_for_book = current_date + timedelta(days=1)
    else:
        date_for_book = current_date
    available_spots = ParkingSpot.get_booking_options(date_for_book)

    spots_name = []
    for one_spot in available_spots:
        spots_name.append(one_spot.name)
    report = "\n".join(spots_name)

    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–ù–∞ {date_for_book} –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–µ –º–µ—Å—Ç–∞:\n{report}",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(F.text == TEXT_BUTTON_3)
async def process_cancel(message: Message):
    """ –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å """
    if await is_user_unauthorized(message):
        await send_refusal_unauthorized(message)
        return 0

    user_id = message.from_user.id
    if User.get_user_role(user_id) == ROLE_AUDITOR:
        await message.reply(
            ACCESS_IS_NOT_ALLOWED_MESSAGE
        )
        return 0

    requester_id = message.from_user.id
    requester = User.get_user_by_id(requester_id)

    if requester is None:
        print("–û—à–∏–±–∫–∞")
        return 0

    current_date = date.today()
    current_time = datetime.now().time()

    if current_time.hour >= TODAY_DEADLINE_CLOCK_FOR_CLIENTS:
        checking_date = current_date + timedelta(days=1)
    else:
        checking_date = current_date

    reservation_by_user = Reservation.select().where(
        Reservation.user_id == requester.id,
        Reservation.booking_date == checking_date
    ).first()

    if reservation_by_user is None:
        await message.answer(text="–£ –í–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏")
        return 0
    else:
        one_button: InlineKeyboardButton = InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f'cancel {reservation_by_user.id}')

        """ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã """
        keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
            inline_keyboard=[[one_button]])
        await message.answer(
            text=" ".join(
                ["–£ –í–∞—Å –µ—Å—Ç—å –±—Ä–æ–Ω—å –º–µ—Å—Ç–∞:", reservation_by_user.parking_spot_id.name, "–Ω–∞", str(checking_date)]),
            reply_markup=keyboard
        )


@dp.callback_query(lambda c: c.data.startswith('cancel'))
async def process_button_cancel(callback_query: CallbackQuery):
    """ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ """
    button_data = callback_query.data
    query_data = button_data.split()
    reservation_id = query_data[1]
    Reservation.delete().where(Reservation.id == reservation_id).execute()

    await callback_query.answer(
        text=CANCEL_SUCCESS_MESSAGE,
        reply_markup=ReplyKeyboardRemove()
    )

    await callback_query.answer(
        text="–£—Å–ø–µ—à–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )

    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=CANCEL_SUCCESS_MESSAGE,
        reply_markup=ReplyKeyboardRemove()
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.message(F.text == TEXT_ADD_USER_BUTTON, StateFilter(default_state))
async def process_adduser_command(message: Message, state: FSMContext):
    if await is_user_unauthorized(message):
        await send_refusal_unauthorized(message)
        return 0

    user_id = message.from_user.id
    if User.get_user_role(user_id) == ROLE_AUDITOR:
        await message.reply(
            ACCESS_IS_NOT_ALLOWED_MESSAGE
        )
        return 0

    guests = Guest.select()

    """ –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≥–æ—Å—Ç–µ–π, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ """
    if len(guests) == 0:
        await bot.send_message(
            chat_id=message.chat.id,
            text=NO_GUESTS_MESSAGE,
            reply_markup=ReplyKeyboardRemove()
        )
        return 0

    for guest in guests:
        pass

    buttons_list = []

    """ –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ guests """
    for guest in guests:
        one_button: InlineKeyboardButton = InlineKeyboardButton(
            text=str(guest),
            callback_data=f'adduser {guest.id}')
        buttons_list.append(one_button)

    """ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã """
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[buttons_list])

    await message.answer(
        text="–ö–æ –º–Ω–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n",
        reply_markup=keyboard
    )

    await state.set_state(FSMFillForm.add_user)


@dp.callback_query(lambda c: c.data.startswith('adduser'), StateFilter(FSMFillForm.add_user))
async def process_button_addguest(callback_query: CallbackQuery, state: FSMContext):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    button_data = callback_query.data
    query_data = button_data.split()
    guest_id = query_data[1]

    buttons_list = []
    buttons_list.append(
        InlineKeyboardButton(
            text=str(ROLE_ADMINISTRATOR),
            callback_data=f'addrole {guest_id} {ROLE_ADMINISTRATOR}')
    )
    buttons_list.append(
        InlineKeyboardButton(
            text=str(ROLE_AUDITOR),
            callback_data=f'addrole {guest_id} {ROLE_AUDITOR}')
    )
    buttons_list.append(
        InlineKeyboardButton(
            text=str(ROLE_CLIENT),
            callback_data=f'addrole {guest_id} {ROLE_CLIENT}')
    )

    """ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã """
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[buttons_list])

    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=CHOOSE_ROLE_MESSAGE,
        reply_markup=keyboard
    )

    await callback_query.answer(
        text=SUCCESS_MESSAGE,
        reply_markup=ReplyKeyboardRemove()
    )


@dp.callback_query(lambda c: c.data.startswith('addrole'), StateFilter(FSMFillForm.add_user))
async def process_button_choose_role(callback_query: CallbackQuery, state: FSMContext):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    button_data = callback_query.data
    query_data = button_data.split()
    guest_id = query_data[1]
    guest_role = query_data[2]

    guest = Guest.get_by_id(guest_id)

    new_user = User.create(
        username=guest.username,
        first_name=guest.first_name,
        last_name=guest.last_name,
        role_id=Role.select().where(Role.name == guest_role),
        telegram_id=guest.telegram_id
    )
    new_user.save()
    guest.delete_guest()

    await callback_query.message.answer(text=USER_ADDED_SUCCESS_MESSAGE)


@dp.message(F.text == TEXT_DELETE_USER_BUTTON)
async def process_delete_user(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """

    if await is_user_unauthorized(message):
        await send_refusal_unauthorized(message)
        return 0

    all_users_str = User.get_all_users()
    all_users = "\n".join(all_users_str)

    await message.reply(text=TEXT_CHOOSE_USER_FOR_DELETE_MESSAGE, reply_markup=ReplyKeyboardRemove())
    await message.answer(text=all_users)
    await state.set_state(FSMFillForm.choose_user_for_delete)


@dp.message(StateFilter(FSMFillForm.choose_user_for_delete))
async def process_delete_specific_user(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    try:
        user_input = int(message.text)
    except ValueError:
        await message.reply(text=TEXT_UNCORRECT_USER_ID_MESSAGE)
        return 0

    """ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–º–µ–Ω—É """
    if user_input == -1:
        await message.reply(text=TEXT_DELETE_USER_CANCEL_MESSAGE)
        await state.clear()
        return 0

    User.delete_user_by_id(user_input)

    await message.reply(text=TEXT_DELETE_USER_SUCCESS_MESSAGE)
    await state.clear()


@dp.message()
async def process_other_messages(message: Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /help """
    await message.answer(text=UNKNOWN_TEXT_MESSAGE)
    await process_help_command(message)
